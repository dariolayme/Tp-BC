import barrileteCosmico.*
describe "Test de Barrilete Cosmico - Primera Entrega" {
	
		const garlicsSea = new Destino (
			nombre = "Garlic´s sea",
			precio = 2500,
			equipajeImpresindible = ["Caña de Pescar", "Piloto"]
		)
	
		const silversSea = new Destino (
			nombre = "Silver's Sea",
			precio = 1350,
			equipajeImpresindible = ["Protector Solar","Equipo de Buceo"]
		)
	
		const lastToninas = new Destino (
			nombre = "Last Toninas",
			precio = 3500,
			equipajeImpresindible = ["Vacuna Gripal", "Vacuna B”,“Necronomicon"]
		)
	
		const goodAirs = new Destino (
			nombre = "Good Airs",
			precio = 1500,
			equipajeImpresindible = ["Cerveza", "Protector Solar"]
		)
			
		const pabloHari = new Usuario (
			nombre = "Pablo Hari",
			usuario = "pHari",
			destinosConocidos = [lastToninas,goodAirs],
			usuariosSeguidos = [],
			dineroDisponible = 1500,
			kilometros = 0 
			)
		
		
		fixture{
			barrileteCosmico.agregarDestino(garlicsSea)
			barrileteCosmico.agregarDestino(silversSea)
			barrileteCosmico.agregarDestino(lastToninas)
			barrileteCosmico.agregarDestino(goodAirs)
			
	
			
		}
		
		test "Los destinos mas importantes son Garlic´s Sea, Last Toninas." {
			assert.equals([garlicsSea,lastToninas], barrileteCosmico.destinosMasImportantes())
		}
		
		test "Aplicando descuento del 25% al viaje a las Toninas es de $1125." {
			lastToninas.aplicarDescuento(25)
			assert.equals(1125, lastToninas.precio())
		}
		
		test "Aplicando descuento del 25% al viaje a las Toninas al equipaje impresindible se le agrega el Certificado de Descuento." {
			lastToninas.aplicarDescuento(25)
			assert.that(lastToninas.tieneElCertificadoDeDescuento())
		} 
		
		//%%%%%%%%%%%%%%% No Relevado %%%%%%%%%%%//
		test "Silver's Sea NO es un destino peligroso." {
			assert.notThat(silversSea.esPeligroso())
		}
		//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%//
		
		//importa el orden//
		test "Aplicando un descuento del 15% a todos los destinos . Garlic´s sea: $2125-Silver's Sea: $1147.5-Last Toninas: $1275-Good Airs: $1275. Ademas todos poseen el certificado de descuento." {
			barrileteCosmico.descuentoMasivo(15)
			assert.equals([2125,1147.5,1275,1275],barrileteCosmico.destinos().map({ destino => destino.precio() }) )
			assert.that(barrileteCosmico.destinos().all({ destino => destino.tieneElCertificadoDeDescuento() }))
		}
		
		//%%%%%%%%%%%%%%% No Relevado %%%%%%%%%%%//
		test "El destino mas peligroso hasta el momento es Last Toninas." {
			
			assert.equals(lastToninas, barrileteCosmico.elDestinoMasPeligroso())
		}
		//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%//
		
		
		test "Barrilete Cosmico es Extrema." {
			assert.that(barrileteCosmico.esExtrema())
		}
		
		test "La carta de Destinos De Barrilete Cosmico es por ahora: Last Toninas, Garlic´s sea, Good Airs y Silver's Sea. " {
			assert.equals(["Last Toninas", "Garlic´s sea", "Good Airs", "Silver's Sea"], barrileteCosmico.destinos().map({ destino => destino.nombre() }))
		}
		
		test "Las Millas del usuario Pablo Hari es de 500km." {
			assert.equals(500, pabloHari.kilometros())
		}
		
		test "Pablo Hari vuela a Silver Sea y se le agrega a la lista de destinos Conocidos." {
			pabloHari.volarA(silversSea)
			assert.that(pabloHari.destinosConocidos().contains(silversSea))
		}
		
		test "Pablo Hari no puede volar por segunda vez a Silver Sea por que no tiene saldo suficiente." {
			pabloHari.volarA(silversSea)
			assert.notThat(pabloHari.puedeVolarA(silversSea)

		}
		
		
		
}